aes(x=weight,y=mpg))+
geom_point()+
xlab('weight(pounds)')+ylab('mileage(mpg')+
ggtitle('relationship between weight and mileage')
#alternatively use pairs() to plot all combinations on the correlation matrix
select(mpg,mpg:horsepower) %>%
pairs()
#linear regression
mpg_regression <- lm(mpg~weight,data=mpg)
summary(mpg_regression)
#fit regression line into the correlation model
ggplot(data=mpg,
aes(x=weight,y=mpg))+
geom_point()+
xlab('weight(pounds)')+ylab('mileage(mpg')+
ggtitle('relationship between weight and mileage')+
geom_smooth(method=lm)
#Test/train split
#set seed to generate the same random numbers from data
set.seed(1234)
mpg_test <- testing(mpg)
mpg_test <- testing(mpg_split)
mpg_split <- initial_split(mpg)
mpg_train <- training(mpg_split)
mpg_test <- testing(mpg_split)
#confirm how many rows and columns are in each dataset
dim(mpg_train)
dim(mpg_test)
#specify what kind of model this is
lm_spec <- linear_reg()
#fit the model to the data
lm_fit <- lm_spec %>%
fit(mpg~weight,data=mpg_train)
#get co-efficient and p-value of training model
tidy(lm_fit)
glance(lm_fit)
#make predictions on the mpg_test data
mpg_results <- predict(lm_fit,new_data = mpg_test) %>%
bind_cols(mpg_test)
mpg_results
#find the rsquar of the mpg_test data using the rsq() function
rsq(data = mpg_results, truth = mpg, estimate = .pred)
#getting the root mean square error
rmse(data=mpg_result, truth = mpg, estimate = .pred)
#getting the root mean square error
rmse(data=mpg_results, truth = mpg, estimate = .pred)
library(tidyverse)
library(psych)
library(tidymodels)
library(readxl)
gc()
ais <- read_excell('datasets/ais/ais.xlsx')
getwd()
ais <- read_excel('datasets/ais/ais.xlsx')
View(ais)
#select rcc and group by sex
ais_grouped <- select(ais, rcc) %>%
group_by(ais,sex)
#select rcc and group by sex
ais_grouped <- group_by(ais,sex)
View(ais)
ggplot2(data = ais_grouped,
aes(x=sex,y=rcc))+
geom(bar)
ggplot(data = ais_grouped,
aes(x=sex,y=rcc))+
geom(bar)
ggplot(data = ais_grouped,
aes(x=sex,y=rcc))+
geom_bar()
ggplot(data = ais,
aes(x=sex,y=rcc))+
geom_bar()
ggplot(data = ais,
aes(x=sex,y=rcc))+
geom_bar()
ggplot(data = ais_grouped,
aes(x=sex,y=rcc))+
geom_bar()
ggplot(data = ais_grouped,
aes(x=sex,y=rcc))+
geom_point()
ggplot(data = ais_grouped,
aes(x=sex,y=rcc))+
geom_plot()
ggplot(data = ais_grouped,
aes(x=sex,y=rcc))+
geom_boxplot()
#or
ggplot(data = ais,
aes(y=rcc))+
geom_histogram()+
facet_grid(sex)
#or
ggplot(data = ais,
aes(y=rcc))+
geom_histogram()+
facet_grid(x= sex)
#or
ggplot(data = ais,
aes(y=rcc))+
geom_histogram()+
facet_grid(ais,sex)
#or
ggplot(data = ais,
aes(y=rcc))+
geom_histogram()+
facet_grid(~sex)
#or
ggplot(data = ais,
aes(x=rcc))+
geom_histogram()+
facet_grid(~sex)
View(ais_grouped)
View(ais)
View(ais)
#correlation matrix of the relevant variables
ais %>%
cor(rcc:wt)
View(ais)
#correlation matrix of the relevant variables
select(ais,rcc:wt) %>%
cor()
#or
ais %>%
select(-c(sport,sex)) %>%
cor()
#check if there is a diffeerence in mean of two groups
t.test(rcc~sex,data=ais)
#regress ht on wt
ais_regression <- lm(ht~wt,data=ais)
ais_regression
dim(ais_regression)
glance(ais_regression)
summary(ais_regression)
#Visualize the relationship between height and weight
ggplot(data = ais,
aes(x = wt, y = ht))+
geom_point()
#Visualize the relationship between height and weight
ggplot(data = ais,
aes(x = wt, y = ht))+
geom_point()+
xlab('weight(pounds)')+ylab('height(cm)')+
ggtitle('Relationship between weight and height')
#Visualize the relationship between height and weight
ggplot(data = ais,
aes(x = wt, y = ht))+
geom_point()+
xlab('weight(pounds)')+ylab('height(cm)')+
ggtitle('Relationship between weight and height')+
geom_smooth(method = lm)
#split regression model into training and test
ais_spec <- linear_reg()
#split regression model into training and test
set.seed(1234)
ais_split <- initial_split(ais)
ais_train <- training(ais_split)
ais_test <- testing(ais_split)
#train
ais_spec <- linear_reg()
ais_fit <- ais_spec %>%
fit(ht~weight,datac= ais_train)
ais_fit <- ais_spec %>%
fit(ht~weight,data = ais_train)
ais_fit <- ais_spec %>%
fit(ht~wt,data = ais_train)
tidy(ais_fit)
glance(ais_fit)
#test model on test data
ais_result <- predict(ais_fit,new_data=ais_test) %>%
bind_cols(ais_test)
ais_result
#find the rsq of the result for the test data
rsq(ais_result, truth = ht, estimate = .pred)
#find the rsq of the result for the test data
rsq(data = ais_result, truth = ht, estimate = .pred)
ggplot(data = mpg,
aes(x=origin,y=mpg))+
geom_boxplot()+
xlab('origin')+ylab('mpg')+
ggtitle('mpg by origin')
ggplot(data = mpg,
aes(x=origin,y=mpg))+
geom_boxplot()+
xlab('origin')+ylab('mpg')+
ggtitle('mpg by origin')
library(tidyverse)
library(psych)
library(tidymodels)
#read data in, select the columns we need
mpg <- read_csv('datasets/mpg/mpg.csv') %>%
select(mpg,weight,horsepower,origin,cylinders)
head(mpg)
describe(mpg)
#count origin
mpg %>%
count(origin)
#Origins broken down by cylinders
mpg %>%
count(origin,cylinders) %>%
pivot_wider(values_from = n, names_from =cylinders)
#descriptive statistics by group
mpg %>%
select(mpg,origin) %>%
describeBy(group = "origin")
#plot the distribution of mpg
ggplot(data = mpg,
aes(x=mpg))+
geom_histogram()+
xlab('mpg')+ylab('count')+
ggtitle('distribution of mpg')
#distribution of mpg by origin
ggplot(data = mpg,
aes(x=origin,y=mpg))+
geom_boxplot()+
xlab('origin')+ylab('mpg')+
ggtitle('mpg by origin')
#Histogram of origin faceted by origin
ggplot(data = mpg,
aes(x=mpg))+
geom_histogram()+
facet_grid(~origin)
#filter out american and european cars
mpg_filtered <- filter(mpg, origin =='USA'|origin =='Europe')
#hypotheses testing
#dependent variable ~ by independent vairaible
t.test(mpg~origin,data=mpg_filtered)
#print correlation matrix for the continuous variables in mpg
select(mpg,mpg:horsepower) %>%
cor()
#visualize relationship between weight and mileage
ggplot(data=mpg,
aes(x=weight,y=mpg))+
geom_point()+
xlab('weight(pounds)')+ylab('mileage(mpg')+
ggtitle('relationship between weight and mileage')
#alternatively use pairs() to plot all combinations on the correlation matrix
select(mpg,mpg:horsepower) %>%
pairs()
#linear regression
mpg_regression <- lm(mpg~weight,data=mpg)
summary(mpg_regression)
#fit regression line into the correlation model
ggplot(data=mpg,
aes(x=weight,y=mpg))+
geom_point()+
xlab('weight(pounds)')+ylab('mileage(mpg')+
ggtitle('relationship between weight and mileage')+
geom_smooth(method=lm)
#Test/train split
#set seed to generate the same random numbers from data
set.seed(1234)
#split data
mpg_split <- initial_split(mpg)
mpg_train <- training(mpg_split)
mpg_test <- testing(mpg_split)
#confirm how many rows and columns are in each dataset
dim(mpg_train)
dim(mpg_test)
#specify what kind of model this is
lm_spec <- linear_reg()
#fit the model to the data
lm_fit <- lm_spec %>%
fit(mpg~weight,data=mpg_train)
#get co-efficient and p-value of training model
tidy(lm_fit)
glance(lm_fit)
#make predictions on the mpg_test data
mpg_results <- predict(lm_fit,new_data = mpg_test) %>%
bind_cols(mpg_test)
mpg_results
#find the rsquar of the mpg_test data using the rsq() function
rsq(data = mpg_results, truth = mpg, estimate = .pred)
View(lm_spec)
library(tidyverse)
ggplot(data = ais_grouped,
aes(x=sex,y=rcc))+
geom_boxplot()
library(tidyverse)
library(psych)
library(tidymodels)
library(readxl)
#read data from excel
ais <- read_excel('datasets/ais/ais.xlsx')
#group by sex and visualize relationship
ais_grouped <- group_by(ais,sex)
ggplot(data = ais_grouped,
aes(x=sex,y=rcc))+
geom_boxplot()
#or
ggplot(data = ais,
aes(x=rcc))+
geom_histogram()+
facet_grid(~sex)
#correlation matrix of the relevant variables
select(ais,rcc:wt) %>%
cor()
#or
ais %>%
select(-c(sport,sex)) %>%
cor()
#check if there is a diffeerence in mean of two groups
t.test(rcc~sex,data=ais)
#regress ht on wt
ais_regression <- lm(ht~wt,data=ais)
ais_regression
summary(ais_regression)
#Visualize the relationship between height and weight
ggplot(data = ais,
aes(x = wt, y = ht))+
geom_point()+
xlab('weight(pounds)')+ylab('height(cm)')+
ggtitle('Relationship between weight and height')+
geom_smooth(method = lm)
#split regression model into training and test
set.seed(1234)
ais_split <- initial_split(ais)
ais_train <- training(ais_split)
ais_test <- testing(ais_split)
#train
ais_spec <- linear_reg()
ais_fit <- ais_spec %>%
fit(ht~wt,data = ais_train)
tidy(ais_fit)
glance(ais_fit)
#test model on test data
ais_result <- predict(ais_fit,new_data=ais_test) %>%
bind_cols(ais_test)
ais_result
#find the rsq of the result for the test data
rsq(data = ais_result, truth = ht, estimate = .pred)
file.exists('test-file.csv')
districts <- read_csv('datasets/star/districts.csv')
spec(districts)
head(districts
head(districts)
head(districts)
spec(districts)
str(districts.csv)
read.csv('datasets/star/districts.csv')
str(districts.csv)
districts <- read_csv('datasets/star/districts.csv')
tar/districts.csv')
str(districts.csv)
spec(districts)
spec(districts)
library(tidyverse)
library(readxl)
#Open census dataset
census <- read_csv('datasets/census/census.csv')
#open census-divisions dataset
division <- read_csv('datasets/census/census-divisions.csv')
head(census)
head(division)
#merge census and division dataset by state
cens_div <- left_join(census,division)
#sort data
arrange(cens_div, region,division,desc(population))
#open write to excel library
library(writexl)
#write data to excel worksheet
write_xlsx(cens_div,'output/cens_div.xlsx')
#drop postalcode field from merged dataset
cens_div <- select(cens_div,c(-postal_code))
#create new column titled density
cens_div <- cens_div %>%
mutate(density = population/land_area)
head(cens_div)
#relationship between land area and population for all observations in 2015
#first fiter data by 2015
cens_2015 <- filter(cens_div,year==2015)
ggplot(data=cens_2015,
aes(x=land_area,y=population))+
geom_point()+
xlab('land area')+ylab('population')+
ggtitle('land_area versus population')
#total population for each region 2015
cens_2015 %>%
group_by(region) %>%
summarize(ttl_population = sum(population))
#create table containing state names and population
pivot_wider(data = select(cens_div, c('state','population','year')),
names_from = 'year', values_from='population')
library(tidyverse)
library(psych)
library(tidymodels)
#read data in, select the columns we need
mpg <- read_csv('datasets/mpg/mpg.csv') %>%
select(mpg,weight,horsepower,origin,cylinders)
head(mpg)
describe(mpg)
#count origin
mpg %>%
count(origin)
#Origins broken down by cylinders
mpg %>%
count(origin,cylinders) %>%
pivot_wider(values_from = n, names_from =cylinders)
#descriptive statistics by group
mpg %>%
select(mpg,origin) %>%
describeBy(group = "origin")
#plot the distribution of mpg
ggplot(data = mpg,
aes(x=mpg))+
geom_histogram()+
xlab('mpg')+ylab('count')+
ggtitle('distribution of mpg')
#distribution of mpg by origin
ggplot(data = mpg,
aes(x=origin,y=mpg))+
geom_boxplot()+
xlab('origin')+ylab('mpg')+
ggtitle('mpg by origin')
#Histogram of origin faceted by origin
ggplot(data = mpg,
aes(x=mpg))+
geom_histogram()+
facet_grid(~origin)
#filter out american and european cars
mpg_filtered <- filter(mpg, origin =='USA'|origin =='Europe')
#hypotheses testing
#dependent variable ~ by independent vairaible
t.test(mpg~origin,data=mpg_filtered)
#print correlation matrix for the continuous variables in mpg
select(mpg,mpg:horsepower) %>%
cor()
#visualize relationship between weight and mileage
ggplot(data=mpg,
aes(x=weight,y=mpg))+
geom_point()+
xlab('weight(pounds)')+ylab('mileage(mpg')+
ggtitle('relationship between weight and mileage')
#alternatively use pairs() to plot all combinations on the correlation matrix
select(mpg,mpg:horsepower) %>%
pairs()
#linear regression
mpg_regression <- lm(mpg~weight,data=mpg)
summary(mpg_regression)
#fit regression line into the correlation model
ggplot(data=mpg,
aes(x=weight,y=mpg))+
geom_point()+
xlab('weight(pounds)')+ylab('mileage(mpg')+
ggtitle('relationship between weight and mileage')+
geom_smooth(method=lm)
#Test/train split
#set seed to generate the same random numbers from data
set.seed(1234)
#split data
mpg_split <- initial_split(mpg)
mpg_train <- training(mpg_split)
mpg_test <- testing(mpg_split)
#confirm how many rows and columns are in each dataset
dim(mpg_train)
dim(mpg_test)
#specify what kind of model this is
lm_spec <- linear_reg()
#fit the model to the data
lm_fit <- lm_spec %>%
fit(mpg~weight,data=mpg_train)
#get co-efficient and p-value of training model
tidy(lm_fit)
glance(lm_fit)
#make predictions on the mpg_test data
mpg_results <- predict(lm_fit,new_data = mpg_test) %>%
bind_cols(mpg_test)
mpg_results
#find the rsquar of the mpg_test data using the rsq() function
rsq(data = mpg_results, truth = mpg, estimate = .pred)
citation()
4+5
install.packages("palmerpenguins")
library('palmerpenguins')
summary(penguins)
View(penguins)
View(penguins_raw)
View(penguins)
library(lubridate)
typeof(c('bread','beans','groundnut'))
list('bean', 2L, 4.23, FALSE)
S = list('bean', 2L, 4.23, FALSE)
str(s)
str(S)
list('chicago'=1,'new york' = 2, 'london' = 3)
$chicago
$'chicago'
$'new york'
'new york'
new york
$new york
$"new york"
(tidyverse)
library(tidyverse)
library(lubridate)
today()
now()
ymd("2020-07-31")
as_date(now())
file.copy ('ch-2.xlsx' , 'Advancing-into-analytics/R')
getwd()
file.copy ('ch-2.xlsx' , 'GitHub/Advancing-into-analytics/R')
file.copy ('ch-2.xlsx' , 'C:/Users/user/Documents/GitHub/Advancing-into-analytics')
setwd("~/GitHub/Advancing-into-analytics/R")
glimpse(diamonds)
colnames(diamonds)
ggplot(data = diamonds, aes(x = carat, y = price, color = cut))+ geom_point()+ facet_wrap(~cut)
?browseVignettes
browseVignettes(psych)
library(psych)
browseVignettes(psych)
